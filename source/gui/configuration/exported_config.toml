[TAIPY]

[DATA_NODE.raw_data]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.community_formatted_data]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.processed_data]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.gnps_annotations]
storage_type = "json"
scope = "SCENARIO:SCOPE"

[DATA_NODE.sirius_annotations]
storage_type = "csv"
scope = "SCENARIO:SCOPE"

[DATA_NODE.results]
storage_type = "csv"
scope = "SCENARIO:SCOPE"

[DATA_NODE.conversion_out]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.feature_finding_out]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.gnps_out]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.sirius_out]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.results_out]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.global_params]
storage_type = "json"
scope = "SCENARIO:SCOPE"

[DATA_NODE.conversion_params]
storage_type = "json"
scope = "SCENARIO:SCOPE"

[DATA_NODE.feature_finding_params]
storage_type = "json"
scope = "SCENARIO:SCOPE"

[DATA_NODE.gnps_params]
storage_type = "json"
scope = "SCENARIO:SCOPE"

[DATA_NODE.sirius_params]
storage_type = "json"
scope = "SCENARIO:SCOPE"

[DATA_NODE.analysis_params]
storage_type = "json"
scope = "SCENARIO:SCOPE"

[DATA_NODE.mzmine_batch]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.mzmine_log]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[DATA_NODE.sirius_config]
storage_type = "in_memory"
scope = "SCENARIO:SCOPE"

[TASK.convert_files]
function = "source.gui.configuration.config.convert_files:function"
inputs = [ "raw_data:SECTION", "conversion_out:SECTION", "conversion_params:SECTION", "global_params:SECTION",]
outputs = [ "community_formatted_data:SECTION",]
skippable = "False:bool"

[TASK.find_features]
function = "source.gui.configuration.config.find_features:function"
inputs = [ "community_formatted_data:SECTION", "feature_finding_out:SECTION", "mzmine_batch:SECTION", "feature_finding_params:SECTION", "global_params:SECTION",]
outputs = [ "processed_data:SECTION", "mzmine_log:SECTION",]
skippable = "False:bool"

[TASK.annotate_gnps]
function = "source.gui.configuration.config.annotate_gnps:function"
inputs = [ "processed_data:SECTION", "gnps_out:SECTION", "mzmine_log:SECTION", "gnps_params:SECTION", "global_params:SECTION",]
outputs = [ "gnps_annotations:SECTION",]
skippable = "False:bool"

[TASK.annotate_sirius]
function = "source.gui.configuration.config.annotate_sirius:function"
inputs = [ "processed_data:SECTION", "sirius_out:SECTION", "sirius_config:SECTION", "sirius_params:SECTION", "global_params:SECTION",]
outputs = [ "sirius_annotations:SECTION",]
skippable = "False:bool"

[TASK.analyze_difference]
function = "source.gui.configuration.config.analyze_difference:function"
inputs = [ "gnps_annotations:SECTION", "sirius_annotations:SECTION", "results_out:SECTION", "results:SECTION", "analysis_params:SECTION", "global_params:SECTION",]
outputs = [ "results:SECTION",]
skippable = "False:bool"

[SCENARIO.MS_analysis]
tasks = [ "convert_files:SECTION", "find_features:SECTION", "annotate_gnps:SECTION", "annotate_sirius:SECTION", "analyze_difference:SECTION",]
additional_data_nodes = []

[SCENARIO.MS_analysis.comparators]

[SCENARIO.MS_analysis.sequences]
conversion = [ "convert_files:SECTION",]
"feature finding" = [ "find_features:SECTION",]
gnps = [ "annotate_gnps:SECTION",]
sirius = [ "annotate_sirius:SECTION",]
analysis = [ "analyze_difference:SECTION",]
